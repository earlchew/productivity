#!/usr/bin/env bash

exec 3>&2 2> "/tmp/${0##*/}.log"

set -e
set -x

say()
{
    local ARG_
    local SEP_=

    for ARG_ ; do
        printf "%s%s" "$SEP_" "$ARG_"
        SEP_=' '
    done
    printf "\n"
}

debug()
{
    set -- "$0: DEBUG:" "$@"

    [ -z "${GITDEBUG++}" ] || say "$@" >&2
}

lsed()
{
    # The FreeBSD sed implementation uses -i '' to perform in-place
    # editing without a backup, whereas GNU uses -i to obtain
    # the same effect. To differentiate between the two use the GNU-only
    # --version option.

    [ x"$1" != x"-i" ] || {
        sed --version >/dev/null 2>&1 || {
            shift
            set -- '-i' '' "$@"
        }
    }

    sed "$@"
}

# https://www.kernel.org/pub/software/scm/git/docs/githooks.html
#
# The first is the name of the file that contains the commit log message.
# The second is the source of the commit message, and can be:
#   message (if a -m or -F option was given)
#   template (if a -t option was given or the configuration option
#       commit.template is set)
#   merge (if the commit is a merge or a .git/MERGE_MSG file exists)
#   squash (if a .git/SQUASH_MSG file exists)
#   commit, followed by a commit SHA1 (if a -c, -C or --amend option was given).
#
# The second argument can also empty if none of the above are satisfied.
#
COMMITLOG=$1
COMMITSRC=$2

debug "Commit log: $COMMITLOG"
debug "Commit src: $COMMITSRC"

# Add Signed-off-by to commit message unless already present
#
[ -z "${EMAIL++}" ] ||
[ -n "${GIT_AUTHOR_EMAIL++}" ] || export GIT_AUTHOR_EMAIL="$EMAIL"

AUTHOR="$(git var GIT_AUTHOR_IDENT)"

if [ -n "$AUTHOR" ] ; then
    AUTHOR="${AUTHOR%%>*}>"
    if [ -n "$( grep '^Signed-off-by:' < "$COMMITLOG" | {
                while read SIGNOFF ; do
                    SIGNOFF="${SIGNOFF#*: }"
                    if [ x"$SIGNOFF" = x"$AUTHOR" ] ; then
                        AUTHOR=
                        break
                    fi
                done
                [ -z "$AUTHOR" ] || printf "%s\n" "$AUTHOR" ; } )" ] ; then
        lsed -i -n -e '1{' \
                     -e 'x' \
                     -e 's/^.*/Signed-off-by: '"$AUTHOR"'/' \
                     -e 'x' \
                   -e '}' \
                   -e '/^#/{' \
                     -e 'x' \
                     -e '/^$/{' -e 'x' -e 'bZ' -e '}' \
                     -e 'G' \
                     -e 'x' \
                     -e 's/.*//' \
                     -e 'x' \
                   -e '}' \
                 -e ':Z' -e 'p' "$COMMITLOG"
    fi
fi

# Check for trailing whitespace on newly added lines
#
[ -n "${GIT_COMMIT_ALLOW_WHITESPACE++}" ] ||
case "$COMMITSRC" in
"" | template)
  TAB=$'\t'
  SMSO="$(tput smso)"
  RMSO="$(tput rmso)"
  git diff -U1 --cached |
  expand |
  sed -n -e '1{' \
             $(: 'Hold exit status as 1st line') \
           -e 'x' -e 's/.*/0/' -e 'x' -e '}' \
         -e '/^diff /{' \
           $(: 'Hold diff header as 2nd line') \
           -e 'x' -e 's/\n.*$//' -e 'x' -e 'H' -e '}' \
         -e '/^@@ /{' \
           $(: 'Hold context header as 3rd line') \
           -e 'x' -e 's/\(\n.*\)\n.*$/\1/' -e 'x' -e 'H' -e '}' \
         -e '/^+.*['"$TAB"' ]$/{' \
           $(: 'Highlight each addition that ends in whitespace') \
           -e ':1' -e 's/\(['"$TAB"' ]['"$TAB"' ]*\)$/'"$SMSO"'\1'"$RMSO"'/' \
                   -e 't1' \
           $(: 'Prepend first output fragment with diff header') \
           -e 'x' -e 'G' -e 's/^.\n//' \
           -e 'p' \
           $(: 'Make exit code reflect an error') \
           -e 's/.*/1/' -e 'h' \
           $(: 'Exit status showing trailing whitespace detected') \
         -e '}' \
         -e '${' \
           $(: 'Print exit code as last line') \
           -e 'x' -e 's/\n.*//' -e 'p' -e '}' | {
      PREV=0
      if read NEXT ; then
        while : ; do
          PREV="$NEXT"
          read NEXT || break
          printf "%s\n" "$PREV"
        done
      fi
      exit "$PREV"
    } >&3 || {
    tput setaf 1 ;
    printf "\n%s\n" "Commit aborted due to detected trailing whitespace"
    tput sgr0 ;
    exit 1
  } >&3
esac

# Add output from diff --cached
#
case "$COMMITSRC" in
"" | template)
  git diff --cached | sed -e '1i\
'"# " -e 's/^/# /' >> "$COMMITLOG"
  if [ -z "${AUTHOR##*<*@cohodata.com>*}" ] ; then
    TICKET=$(git log --pretty='format:%B' -1 HEAD |
             sed -n -e '/^ref /{' -e '   s/^[a-z]* //' -e 'p' -e 'q' -e '}' \
                    -e '/^fix /{' -e '   s/^[a-z]* //' -e 'p' -e 'q' -e '}' \
                    -e '/^reopen /{' -e 's/^[a-z]* //' -e 'p' -e 'q' -e '}' \
                    -e '/^close /{' -e ' s/^[a-z]* //' -e 'p' -e 'q' -e '}')
    [ -n "$TICKET" ] || TICKET="CIO-1234"
    lsed -i -e '1i\
'"ref $TICKET\\"'
'"fix $TICKET\\"'
'"reopen $TICKET\\"'
'"close $TICKET"   "$COMMITLOG"
  fi
  COMPONENT=$(git log --pretty='format:%B' -1 HEAD |
              sed -n -e '1{' -e 's/.*\[\(.*\)\].*/\1/' -e 'p' -e '}' )
  [ -z "$COMPONENT" ] ||
      lsed -i -e '1{' \
                -e 's/^..*$/\
&/' $(: 'Insert an empty line if required') \
                -e 'i\
'"[$COMPONENT] Summary" $(: 'Insert summary') \
              -e '}' "$COMMITLOG"
  ;;
esac
