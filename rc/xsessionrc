# This initialisation script will be invoked when initialising an X session.
# It should restrict itself to initialising environment variables to
# configure a session.

# Augmented environment
#
eval "$(
    [ ! -d ~/etc/env ] || for LOCALENV in ~/etc/env/+* ; do
        while read -r REPLY ; do
            printf '\nexport %s' "$REPLY"
        done < "$LOCALENV"
    done)"

# Augmented path
#
PATH=$(
    {
        [ ! -d ~/etc/paths ] || for P in ~/etc/paths/+* ; do
            while read LOCALPATH ; do
	        eval printf "'%s\n'" '"'"$LOCALPATH"'"'
            done < "$P"
        done
    } | {
	LOCALPATH=:
	while read -r P ; do
	    LOCALPATH="$LOCALPATH$P:"
	done
	LOCALPATH=${LOCALPATH#:}
	[ -z "$LOCALPATH" ] || PATH="$LOCALPATH$PATH"
	printf '%s\n' "$PATH"
    }
)

# Local path
#
export PATH=$(
    LOCALPATH="$HOME/bin"
    [ -n "${HOME:++}"                        ] &&
    [ x"$PATH" != x"$LOCALPATH"              ] &&
    [ x"$PATH"  = x"${PATH##$LOCALPATH:*}"   ] &&
    [ x"$PATH"  = x"${PATH##*:$LOCALPATH:*}" ] &&
    [ x"$PATH"  = x"${PATH%%*:$LOCALPATH}"   ] &&
    PATH="$LOCALPATH:$PATH"
    echo "$PATH")

# Initialise pyenv
#
# The initialisation for pyenv must come after all other PATH configuration
# in order to have the python shims installed ahead of the other
# path components.
#
[ ! -x "$(which pyenv)" ] || eval "$(pyenv init -)"

# Editor selection
#
if [ -x "$(which vim)" ] ; then
    export EDITOR=$(which vim)
elif [ -x "$(which vi)" ] ; then
    export EDITOR=$(which vi)
fi

# Colour directory listings
#
# Use ~/.dircolorsrc because Red Hat based systems have colorls.sh which
# will actively look for ~/.dir_colors and ~/.dircolors.
#
# http://www.gnu.org/software/coreutils/manual/coreutils.html
#
# Note that using the --color option may incur a noticeable performance
# penalty when run in a directory with very many entries, because the
# default settings require that ls stat every single file it lists.
# However, if you would like most of the file-type coloring but can
# live without the other coloring options (e.g., executable, orphan,
# sticky, other-writable, capability), use dircolors to set the LS_COLORS
# environment variable like this,
#
#          eval $(dircolors -p | perl -pe \
#                      's/^((CAP|S[ET]|O[TR]|M|E)\w+).*/$1 00/' | dircolors -)
#
# and on a dirent.d_type-capable file system, ls will perform only one
# stat call per command line argument.

case "$(uname -s)" in
Darwin)
    # OS X does not have dircolors:
    #
    # http://unix.stackexchange.com/questions/91937/mac-os-x-dircolors-not-found
    export CLICOLOR=YES
    export LSCOLORS=GxFxCxDxBxegedabagaced
    ;;
*)
    eval $(
        awk -W source='
        BEGIN {
            while ("dircolors -p" | getline) {
                if (/^ *[[:upper:]]/) K[$1] = 1;
            }
        }
        {
            sub(/^\(\(CAP\|S[ET]\|O[TR]\|M\|E\)[A-Za-z0-9_]\+\).*/,"\1 00");
            if (/^ *[[:upper:]]/) {
                if ( ! ($1 in K))
                    printf("# ");
            }
            print;
        }
        ' < "$HOME/.dircolorsrc" | dircolors -
    )
    ;;
esac

# Choose email address for git
#
# The man page for git-commit-tree says in reference to GIT_AUTHOR_EMAIL, and
# GIT_COMMITTER_EMAIL:
#
#    In case (some of) these environment variables are not set, the
#    information is taken from the configuration items user.name and
#    user.email, or, if not present, the environment variable EMAIL, or, if
#    that is not set, system user name and the hostname used for outgoing
#    mail (taken from /etc/mailname and falling back to the fully qualified
#    hostname when that file does not exist).
#
# This means that the environment variable EMAIL will be used as a default
# in the absence of user.email, GIT_AUTHOR_EMAIL and GIT_COMMITTER_EMAIL.
# Setting EMAIL here allows each repository to override the value if
# required.

[ -n "${EMAIL++}" ] || [ ! -r ~/etc/email ] || {
    read EMAIL
    export EMAIL
} < ~/etc/email
